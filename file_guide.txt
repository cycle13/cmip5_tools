cmip5_paths.py: Contains two useful functions: get_directory, which returns the
                directory containing monthly output for the specified model,
		variable, and experiment; and build_model_list, which returns
		a list of all CMIP5 models in this analysis (chosen with the
		aid of choose_models.py and choose_models_future.py).
		To run: These functions are both designed to be called by other
		        functions; see for example cmip5_field.py and
			cmip5_eraint_rms_errors.py. Note that for get_directory
			to work, you must be running on raijin and be part of
			the ua6 project, with "module use ~access/modules"
			and "module load pythonlib/ARCCSSive" in your .bashrc.

eraint_field.py: Reads ERA-Interim monthly data for the given variable name,
                 between the given start and end years. Returns the monthly
		 climatology. (If you want just one year with no climatological
		 averaging, set the start and end year to be the same.)
                 To run: The function eraint_field is designed to be called
		         by other functions; see for example
			 eraint_climatology_netcdf.py. If you are using it,
			 be sure to edit the parameters near the top of the
			 file (eg paths to ERA-Interim monthly data).

ecco2_field.py: Reads ECCO2 data for the given variable name, between the given
                start and end years. Interpolates to the northern boundary of
		the circumpolar ROMS domain (currently 30S). Returns the monthly
		climatology.
		To run: The function ecco2_field is designed to be called by
		        other functions; see for example
			ecco2_climatology_netcdf.py. If you are using it, be
			sure to edit the parameters near the top of the file
			(eg paths to ECCO2 data, and the location of the ROMS
			northern boundary).

interp_model2era.py: Interpolates a given CMIP5 field to the ERA-Interim grid.
                     To run: The function interp_model2era is designed to be
		     called by other functions; see for example
		     cmip5_atmos_climatology_netcdf.py.

cmip5_field.py: Reads CMIP5 output for the given model, experiment, and variable
                name. Returns the monthly climatology over the given years as
		well as the grid (longitude, latitude, and depth arrays). If
		you want one year of data with no climatological averaging, set
		the start year to the be the same as the end year.
		To run: The function cmip5_field is designed to be called by
		        other functions; see for example
			cmip5_atmos_climatology_netcdf.py. Note that for this
			function to work, you must be running on raijin and be
			part of the ua6 project, with
			"module use ~access/modules" and
			"module load pythonlib/ARCCSSive" in your .bashrc.

eraint_climatology_netcdf.py: Calculates the ERA-Interim monthly climatology
                              from 1992-2005 inclusive, for 11 atmospheric
			      variables (all the variables which ROMS and/or
			      FESOM depend on). Save to a NetCDF file.
			      To run: First edit the variable output_file, near
			              the top of the file, to suit your
				      filesystem. Then open python or ipython
				      and type
				      "run eraint_climatology_netcdf.py".

ecco2_climatology_netcdf.py: Like eraint_climatology_netcdf.py, but for ECCO2
                             ocean variables rather than ERA-Interim atmoshperic
			     variables, interpolated to the northern boundary
			     of the ROMS domain (set in ecco2_field.py).
			     To run: First edit the variable output_file, near
			             the top of the file, to suit your
				     filesystem. Then open python or ipython and
				     type "run ecco2_climatology_netcdf.py".

cmip5_atmos_climatology_netcdf.py: For the given CMIP5 model, calculates the
                        monthly climatology from 1992-2005 inclusive for 11
			atmospheric variables. Interpolates to the ERA-Interim
			grid and saves to a NetCDF file. Note that to run this
			script, you must have previously run
			eraint_climatology_netcdf.py.
			To run: First edit the variables output_file and
			        eraint_file, near the top of the file, to suit
				your filesystem. Then make sure that you have
				scipy version 0.14 or higher (on raijin, this
				means switching to python/2.7.6; instructions
				at the top of the file). To call this function
				for all CMIP5 models, open python or ipython and
				type "run cmip5_atmos_climatology_netcdf.py".
				To call this function for just one model, e.g.
				ACCESS1-0, open python or ipython and type
				"from cmip5_atmos_climatology_netcdf import *"
				and then
				"cmip5_atmos_climatology_netcdf('ACCESS1-0')".

cmip5_ocean_climatology_netcdf.py: For the given CMIP5 model, calculates the
                       monthly climatology from 1992-2005 inclusive for
		       temperature and salinity. Interpolates to the ECCO2 grid
		       at the northern boundary of ROMS and saves to a NetCDF
		       file. Note that to run this script, you must have
		       previously run ecco2_climatology_netcdf.py.
		       To run: First edit the variables output_file and
		               ecco2_file, near the top of the file, to suit
			       your filesystem. Then make sure that you have
			       scipy version 0.14 or higher (on raijin, this
			       means switching to python/2.7.6; instructions at
			       the top of the file). To call this function for
			       all CMIP5 models, open python or ipython and type
			       "run cmip5_ocean_climatology_netcdf.py".
			       To call this function for just one model, e.g.
			       ACCESS1-0, open python or ipython and type
			       "from cmip5_ocean_climatology_netcdf import *"
			       and then
			       "cmip5_ocean_climatology_netcdf('ACCESS1-0')".

mmm_atmos_netcdf.py: Calculate the multi-model mean of atmospheric climatology
                     files created using cmip5_atmos_climatology_netcdf.py.
		     To run: First edit the variable "directory" near the top
		             of the file. Then open python or ipython and type
			     "run mmm_atmos_netcdf.py".

mmm_ocean_netcdf.py: Calculate the multi-model mean of ocean climatology files
                     created using cmip5_ocean_climatology_netcdf.py.
		     To run: First edit the variable "directory" near the top of
		             the file. Then open python or ipython and type
			     "run mmm_ocean_netcdf.py".

cmip5_eraint_rms_errors.py: Calculates root-mean-square errors (as in Gleckler
                            et al., 2008) for each of 39 CMIP5 models and the
			    multi-model mean, with respect to 11 ERA-Interim
			    atmospheric variables. The domain is the Southern
			    Ocean (all longitudes, and latitudes from the
			    northern boundary of ROMS to the southernmost ocean
			    point not in an ice shelf cavity) and the monthly
			    climatology averaged over 1992-2005 inclusive.
			    Also calculate the relative errors as in Gleckler
			    et al. and make a "portrait plot" of coloured tiles
			    in a model vs. variable matrix. Save both rms errors
			    and relative errors into text files. 
			    To run: First edit the variable "directory", near
			            the top of the file, to suit your
				    filesystem, and "roms_grid" to point to the
				    roms grid file. Then open python or ipython
				    and type "run cmip5_eraint_rms_errors.py".

cmip5_ecco2_rms_errors.py: Same as cmip5_eraint_rms_errors.py, but for ECCO2
                           ocean variables rather than ERA-Interim atmospheric
			   variables, at the northern boundary of ROMS
			   (currently 30S).
			   To run: First edit the variable "directory", near
			           the top of the file, to suit your filesystem.
				   Then open python or ipython and type
				   "run cmip5_ecco2_rms_errors.py".

cmip5_plot.py: Compare output from CMIP5 models to ERA-Interim (for atmosphere
               variables) or ECCO2 (for ocean variables) by plotting the given
	       variable, time-averaged over the given season and zonally
	       averaged over the Southern Ocean (for atmosphere variables) or
	       the northern boundary of ROMS (for ocean variables). The plot
	       will have the given variable on the x-axis and latitude (for
	       atmosphere variables) or depth (for ocean variables) on the
	       y-axis. 
	       To run: First edit the variable "directory", near the top of the
	               file, to suit your filesystem, and the variable
		       "roms_grid" to point to your ROMS grid file. (Note that
		       your choice of roms_grid will affect the latitude bounds
		       on atmosphere plots but not ocean plots, which read
		       NetCDF files which have already been interpolated to
		       the northern boundary of ROMS). Then open python or
		       ipython and type "run cmip5_plot.py". The script will
		       prompt you for the variable name, season code, models
		       to include ('MMM' is an option for multi-model mean),
		       and whether to save the plot (and if so, what the
		       filename should be) or display it on the screen.
		       As with circumpolar_plot.py, circumpolar_cice_plot.py,
		       and zonal_plot.py, the interface will repeat as many
		       times as you like, and you only have to specify which
		       parameters have changed since the last plot.

cmip5_all_plots.py: Call cmip5_plot.py for all models (including the multi-model
                    mean), all variables (atmosphere and ocean), and all
		    seasons. The directory "cmip5/" must exist.
		    To run: Open python or ipython and type
		            "run cmip5_all_plots.py".

cmip5_max_uwind.py: Create two plots: (1) the maximum zonal wind speed between
                    30S and 65S, and (2) the latitude of that maximum zonal
		    wind speed, both against longitude. Plot results for
		    ERA-Interim as well as the given CMIP5 models, averaged
		    over the given season, for the 1992-2005 climatology.
		    To run: First edit the variable "directory", near the top
		            of the file, to suit your filesystem. Then open
			    python or ipython and type "run cmip5_max_uwind.py".
			    The script will prompt you for the models to include
			    ('MMM' is an option for multi-model-mean), the
			    season code, and whether to save the plots (and if
			    so, what the filenames should be) or display them
			    on the screen. As with circumpolar_plot.py,
			    circumpolar_cice_plot.py, zonal_plot.py, and
			    cmip5_plot.py, the interface will repeat as many
			    times as you like, and you only have to specify
			    which parameters have changed since the last plot.

choose_models.py: Builds a list of all CMIP5 models that have the data we need
                  for the historical RMS error analysis.
		  To run: Open python or ipython and type
		          "run choose_models.py".

choose_models_future.py: Builds a list of all CMIP5 models which satisfy
                         choose_models.py and also have all the data we need
			 to create RCP 4.5 and 8.5 boundary conditions.
			 To run: Open python or ipython and type
			         "run choose_models_future.py".

cmip5_atmos_rcp_raw.py: For the given CMIP5 model, read monthly averages of 11
                        atmospheric variables for RCPs 4.5 and 8.5. Interpolate
			to the ERA-Interim grid, and save to NetCDF files
			(one file per RCP).
			To run: First edit the variables output_base and
			        eraint_file, near the top of the file, to suit
				your filesystem. Then make sure that you have
				scipy version 0.14 or higher (on raijin, this
				means switching to python/2.7.6; instructions
				at the top of the file). To call this function
				for all CMIP5 models, open python or ipython
				and type "run cmip5_atmos_rcp_raw.py". To call
				this function for just one model, e.g.
				ACCESS1-3, open python or ipython and type
				"from cmip5_atmos_rcp_raw import *" and then
				"cmip5_atmos_rcp_raw('ACCESS1-3')".

mmm_atmos_rcp_raw.py: Calculate the multi-model-mean of monthly-averaged
                      atmospheric output for RCPs 4.5 and 8.5. 
		      To run: First edit the variables directory and
		              eraint_file, near the top of your file, to suit
			      your filesystem. Then open python or ipython
			      and type "run mmm_atmos_rcp_raw.py".

rcp_forcing_monthly_atmos.py: Bias-correct the RCP monthly atmospheric forcing
                              from ACCESS1-3 and the multi-model mean (MMM):
			      Subtract the model's 1992-2005 climatology, and
			      add ERA-Interim's 1992-2005 climatology in its
			      place.
			      To run: Make copies of the raw RCP files as
			              described at the top of this file. Edit
				      the variable "directory_head" near the
				      top of the file. Then open python or
				      ipython and type
				      "run rcp_forcing_monthly_atmos.py".

extract_submonthly_variability.py: For the given year, calculate the 6- and
                                   12-hourly anomalies from the monthly mean,
				   for ERA-Interim atomspheric variables.
				   Save this sub-monthly variability in
				   NetCDF files (one file for 6-hourly, one
				   for 12-hourly).
				   To run: First edit the directories near
				           the top of the file to suit your
					   filesystem. Then open python or
					   ipython. To process the 12-year
					   period 1994-2005 inclusive, type
					"run extract_submonthly_variability.py".
					   To process a single year, say 1994,
					   type
			          "from extract_submonthly_variability import *"
			                   followed by
			                 "extract_submonthly_variability(1994)".

rcp_forcing_subdaily_atmos.py: For the given experiment (RCP 4.5 or 8.5) and
                               model (ACCESS1-3 or MMM), add ERA-Interim
			       submonthly variability to the bias-corrected
			       monthly RCP forcing, in a repeating 12-year
			       cycle.
			       To run: First edit the directories near the top
			               of the file to suit your filesystem.
				       Then open python or ipython and type
				       "run rcp_forcing_subdaily_atmos.py".
				       You will be prompted for the experiment
				       and the model name.

unravel_fesom.py: For the given experiment (RCP 4.5 or 8.5) and model
                  (ACCESS1-3 or MMM), convert the final bias-corrected,
		  submonthly-variability-added RCP forcing from the original
		  file structure (two files per year, containing all 6-hourly
		  variables and all 12-hourly variables) to the file structure
		  needed by FESOM (four files per 6-hourly variable and two
		  files per 12-hourly variable, each containing data at the
		  same time of day for the entire length of the simulation).
		  To run: First edit the directories near the top of the file
		          to suit your filesystem. Then open python or ipython
			  and type "run unravel_fesom.py". You will be
			  prompted for the experiment and the model name.


ORDER OF THINGS TO RUN:

TO GENERATE RMS ERROR ANALYSES AND PLOTS:
eraint_climatology_netcdf.py
cmip5_atmos_climatology_netcdf.py
mmm_atmos_netcdf.py
cmip5_eraint_rms_errors.py
ecco2_climatology_netcdf.py
cmip5_ocean_climatology_netcdf.py
mmm_ocean_netcdf.py
cmip5_ecco2_rms_errors.py
cmip5_plot.py AND/OR cmip5_all_plots.py AND/OR cmip5_max_uwind.py

TO GENERATE ATMOSPHERIC RCP FORCING:
eraint_climatology_netcdf.py
cmip5_atmos_climatology_netcdf.py
mmm_atmos_netcdf.py
cmip5_atmos_rcp_raw.py
mmm_atmos_rcp_raw.py
rcp_forcing_monthly_atmos.py (first make new directories as described in file)
extract_submonthly_variability.py
rcp_forcing_subdaily_atmos.py
unravel_fesom.py
